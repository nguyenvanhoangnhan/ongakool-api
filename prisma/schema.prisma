// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id Int @id @default(autoincrement())

  email   String  @unique
  pwdHash String?
  pwdSalt String?

  fullname String?

  avatarImageUrl String?

  createdAt Int?
  updatedAt Int?

  profile                               profile?
  artist                                artist[]
  user_listen_track                     user_listen_track[]
  user_listen_album                     user_listen_album[]
  playlist                              playlist[]
  user_favourite_tracks                 user_favourite_track[]                 @relation("user_favourite_track_user_fk")
  rbac_user_role_links                  rbac_user_role_link[]
  user_listen_artist                    user_listen_artist[]
  recent_listening_based_recommendation recent_listening_based_recommendation?
}

model profile {
  id        Int     @id @default(autoincrement())
  userId    Int     @unique
  firstName String?
  lastName  String?

  address String?

  user user @relation(fields: [userId], references: [id])
}

model track {
  id Int @id @default(autoincrement())

  spotifyTrackId String? @unique @db.VarChar(22)

  title       String @db.VarChar(512)
  artistNames String @db.VarChar(640) // Comma separated artist names, for convenience
  durationMs  Int
  trackNumber Int? // Track number in the album
  discNumber  Int? // Disc number in the album

  audioId         Int?
  mainArtistId    Int
  albumId         Int?
  listenCount     Int     @default(0)
  previewAudioUrl String?

  temp_popularity Int? @default(0)

  temp_mark Int? @default(0)

  mainArtist                      artist                            @relation(fields: [mainArtistId], references: [id])
  album                           album?                            @relation(fields: [albumId], references: [id])
  audio                           audio?                            @relation(fields: [audioId], references: [id])
  user_listen_tracks              user_listen_track[]
  playlist_track_links            playlist_track_link[]
  user_favourite_tracks           user_favourite_track[]            @relation("user_favourite_track_track_fk")
  secondary_artist_track_links    secondary_artist_track_link[]
  track_spotifySecondTrackId_link track_spotifySecondTrackId_link[]
  lyrics                          lyrics?

  @@index([spotifyTrackId], name: "track_spotifyTrackId_index")
}

model album {
  id             Int     @id @default(autoincrement())
  title          String  @db.VarChar(512)
  spotifyAlbumId String? @unique @db.VarChar(22)

  artistId      Int?
  coverImageUrl String?

  albumGroup AlbumGroup?
  albumType  AlbumType?

  releasedAt Int? /// YYYYMMDD
  createdAt  Int?
  updatedAt  Int?

  temp_popularity Int? @default(0)

  tracks             track[]
  artist             artist?             @relation(fields: [artistId], references: [id])
  user_listen_albums user_listen_album[]

  @@index([spotifyAlbumId], name: "album_spotifyAlbumId_index")
}

model artist {
  id              Int     @id @default(autoincrement())
  spotifyArtistId String? @unique @db.VarChar(22)

  name         String?
  introduction String?

  userId         Int?
  avatarImageUrl String?
  coverImageUrl  String? @unique

  createdAt Int?
  updatedAt Int?

  temp_popularity Int? @default(0)

  user                        user?                         @relation(fields: [userId], references: [id])
  albums                      album[]
  secondary_artist_track_link secondary_artist_track_link[]
  tracks                      track[]
  user_listen_artist          user_listen_artist[]

  @@index([spotifyArtistId], name: "artist_spotifyArtistId_index")
}

model playlist {
  id Int @id @default(autoincrement())

  name        String?
  description String?

  ownerUserId   Int
  coverImageUrl String

  createdAt Int?
  updatedAt Int?

  ownerUser            user                  @relation(fields: [ownerUserId], references: [id])
  playlist_track_links playlist_track_link[]
}

model secondary_artist_track_link {
  id Int @id @default(autoincrement())

  artistId Int
  trackId  Int

  createdAt Int

  artist artist @relation(fields: [artistId], references: [id])
  track  track  @relation(fields: [trackId], references: [id])
}

model playlist_track_link {
  id Int @id @default(autoincrement())

  playlistId Int
  trackId    Int
  no         Int

  createdAt Int

  playlist playlist @relation(fields: [playlistId], references: [id])
  track    track    @relation(fields: [trackId], references: [id])
}

model audio {
  id Int @id @default(autoincrement())

  label       String? @db.VarChar(512)
  path        String?
  s3ObjectKey String?
  size        Int? /// In bytes
  length      Int? /// In seconds
  fullUrl     String?

  createdAt Int?
  updatedAt Int?
  track     track[]
}

model user_listen_track {
  id Int @id @default(autoincrement())

  userId      Int
  trackId     Int
  listenCount Int @default(0)

  createdAt Int?
  updatedAt Int?

  user  user  @relation(fields: [userId], references: [id])
  track track @relation(fields: [trackId], references: [id])

  @@unique([userId, trackId], name: "user_listen_track_userId_trackId_unique")
}

model user_listen_artist {
  id Int @id @default(autoincrement())

  userId      Int
  artistId    Int
  listenCount Int @default(0)

  createdAt Int?
  updatedAt Int?

  user   user   @relation(fields: [userId], references: [id])
  artist artist @relation(fields: [artistId], references: [id])

  @@unique([userId, artistId], name: "user_listen_artist_userId_artistId_unique")
}

model user_favourite_track {
  id Int @id @default(autoincrement())

  userId  Int
  trackId Int

  createdAt Int?
  updatedAt Int?

  user  user  @relation("user_favourite_track_user_fk", fields: [userId], references: [id])
  track track @relation("user_favourite_track_track_fk", fields: [trackId], references: [id])
}

model user_listen_album {
  id Int @id @default(autoincrement())

  userId  Int
  albumId Int

  createdAt Int?
  updatedAt Int?

  user  user  @relation(fields: [userId], references: [id])
  album album @relation(fields: [albumId], references: [id])

  @@unique([userId, albumId], name: "user_listen_album_userId_albumId_unique")
}

model track_spotifySecondTrackId_link {
  id Int @id @default(autoincrement())

  trackId              Int
  spotifySecondTrackId String @db.VarChar(22)

  track track @relation(fields: [trackId], references: [id])
}

model lyrics {
  id Int @id @default(autoincrement())

  trackId Int     @unique
  content String? @db.Text

  createdAt Int?
  updatedAt Int?

  track track @relation(fields: [trackId], references: [id])
}

// RBAC:
model rbac_permission {
  uniqueName                String                      @id
  displayName               String?
  description               String?
  rbac_role_permission_link rbac_role_permission_link[]
}

model recent_listening_based_recommendation {
  id Int @id @default(autoincrement())

  userId   Int    @unique
  trackIds String @db.Text

  createdAt Int?
  updatedAt Int?

  user user @relation(fields: [userId], references: [id])
}

model rbac_role {
  uniqueName                String                      @id
  displayName               String?
  description               String?
  rbac_role_permission_link rbac_role_permission_link[]
  rbac_user_role_link       rbac_user_role_link[]
}

model rbac_role_permission_link {
  id Int @id @default(autoincrement())

  roleId       String
  permissionId String

  role       rbac_role       @relation(fields: [roleId], references: [uniqueName])
  permission rbac_permission @relation(fields: [permissionId], references: [uniqueName])
}

model rbac_user_role_link {
  id Int @id @default(autoincrement())

  userId Int
  roleId String

  user user      @relation(fields: [userId], references: [id])
  role rbac_role @relation(fields: [roleId], references: [uniqueName])
}

// Same as spotify API SimplifiedAlbumObject.album_group
enum AlbumGroup {
  single
  album
  appears_on
  compilation
}

// Same as spotify API SimplifiedAlbumObject.album_type
enum AlbumType {
  album
  single
  compilation
}
